/**
 * Bot SpiderTV Final - Renova√ß√£o Completa do Cliente 648718886
 */

const puppeteer = require('puppeteer');

console.log('üï∑Ô∏è Bot SpiderTV - Renova√ß√£o Final Cliente 648718886');

function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

async function renovarClienteFinal() {
    let browser;
    
    try {
        console.log('üöÄ Lan√ßando Chromium...');
        
        browser = await puppeteer.launch({
            headless: false,
            slowMo: 500,
            args: [
                '--no-sandbox',
                '--disable-setuid-sandbox',
                '--disable-blink-features=AutomationControlled',
                '--disable-web-security'
            ]
        });
        
        console.log('‚úÖ Chromium lan√ßado!');
        
        const page = await browser.newPage();
        
        // Configura√ß√µes anti-detec√ß√£o
        await page.evaluateOnNewDocument(() => {
            Object.defineProperty(navigator, 'webdriver', {
                get: () => undefined,
            });
        });
        
        await page.setViewport({ width: 1280, height: 720 });
        await page.setUserAgent('Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36');
        
        console.log('üåê Navegando para SpiderTV...');
        await page.goto('https://spidertv.sigma.st', { 
            waitUntil: 'networkidle0',
            timeout: 30000 
        });
        
        console.log('‚úÖ P√°gina carregada!');
        await sleep(2000);
        
        // ETAPA 1: LOGIN R√ÅPIDO
        console.log('\n=== ETAPA 1: LOGIN R√ÅPIDO ===');
        
        await page.waitForSelector('input', { timeout: 10000 });
        
        // Campo de usu√°rio - COLAR DIRETO
        const userField = await page.$('input[type="text"]');
        if (userField) {
            console.log('üë§ Colando usu√°rio: tropicalplay');
            await userField.click();
            await sleep(200);
            await page.evaluate((element, value) => {
                element.value = value;
                element.dispatchEvent(new Event('input', { bubbles: true }));
            }, userField, 'tropicalplay');
        }
        
        // Campo de senha - COLAR DIRETO
        const passwordField = await page.$('input[type="password"]');
        if (passwordField) {
            console.log('üîí Colando senha: Virginia13');
            await passwordField.click();
            await sleep(200);
            await page.evaluate((element, value) => {
                element.value = value;
                element.dispatchEvent(new Event('input', { bubbles: true }));
            }, passwordField, 'Virginia13');
        }
        
        await sleep(1000);
        
        // Bot√£o de login
        const loginButton = await page.$('button[type="submit"]');
        if (loginButton) {
            console.log('üîÑ Fazendo login...');
            await loginButton.click();
            await sleep(4000);
            
            const newUrl = page.url();
            console.log('üåê URL ap√≥s login:', newUrl);
            
            if (newUrl.includes('/dashboard')) {
                console.log('üéâ LOGIN REALIZADO COM SUCESSO!');
                
                // ETAPA 2: NAVEGAR PARA CLIENTES
                console.log('\n=== ETAPA 2: NAVEGANDO PARA CLIENTES ===');
                
                await page.goto('https://spidertv.sigma.st/#/customers', { 
                    waitUntil: 'networkidle0',
                    timeout: 30000 
                });
                
                console.log('‚úÖ P√°gina de clientes carregada!');
                await sleep(3000);
                
                // ETAPA 3: BUSCAR CLIENTE 648718886
                console.log('\n=== ETAPA 3: BUSCANDO CLIENTE 648718886 ===');
                
                const searchSelector = 'input[type="text"][placeholder="Pesquisar"]';
                await page.waitForSelector(searchSelector, { timeout: 10000 });
                
                const searchField = await page.$(searchSelector);
                if (searchField) {
                    console.log('‚úÖ Campo de pesquisa encontrado!');
                    
                    await searchField.click();
                    await sleep(300);
                    
                    console.log('üîç Colando ID do cliente: 648718886');
                    await page.evaluate((element, value) => {
                        element.value = value;
                        element.dispatchEvent(new Event('input', { bubbles: true }));
                    }, searchField, '648718886');
                    
                    console.log('‚èé Pressionando Enter para buscar...');
                    await searchField.press('Enter');
                    
                    console.log('‚è≥ Aguardando resultados da busca...');
                    await sleep(4000);
                    
                    // ETAPA 4: CLICAR NO BOT√ÉO DE RENOVA√á√ÉO
                    console.log('\n=== ETAPA 4: CLICANDO NO BOT√ÉO DE RENOVA√á√ÉO ===');
                    
                    // Procurar pelo bot√£o espec√≠fico de renova√ß√£o (√≠cone fa-calendar-plus)
                    const renewButtonSelector = 'button.btn-warning i.fa-calendar-plus';
                    
                    try {
                        await page.waitForSelector(renewButtonSelector, { timeout: 5000 });
                        const renewButton = await page.$(renewButtonSelector);
                        
                        if (renewButton) {
                            console.log('‚úÖ Bot√£o de renova√ß√£o encontrado!');
                            
                            // Clicar no bot√£o pai (button)
                            const parentButton = await page.evaluateHandle(el => el.parentElement, renewButton);
                            await parentButton.click();
                            
                            console.log('üîÑ Clicou no bot√£o de renova√ß√£o!');
                            
                            // Aguardar modal aparecer
                            await sleep(3000);
                            
                            // ETAPA 5: CONFIRMAR RENOVA√á√ÉO NO MODAL
                            console.log('\n=== ETAPA 5: CONFIRMANDO RENOVA√á√ÉO NO MODAL ===');
                            
                            // Aguardar o modal aparecer
                            await page.waitForSelector('#renewModal', { timeout: 10000 });
                            console.log('‚úÖ Modal de renova√ß√£o aberto!');
                            
                            // Screenshot do modal
                            await page.screenshot({ path: 'renovacao-final-modal.png', fullPage: true });
                            console.log('üì∏ Screenshot do modal');
                            
                            // Verificar se "PLANO COMPLETO" j√° est√° selecionado
                            const planoSelecionado = await page.$eval('#renewModal .el-select__placeholder', el => el.textContent);
                            console.log(`üìã Plano selecionado: ${planoSelecionado}`);
                            
                            if (planoSelecionado.includes('PLANO COMPLETO')) {
                                console.log('‚úÖ PLANO COMPLETO j√° est√° selecionado!');
                            } else {
                                console.log('üîÑ Selecionando PLANO COMPLETO...');
                                // Aqui voc√™ pode adicionar c√≥digo para selecionar o plano se necess√°rio
                            }
                            
                            // Procurar e clicar no bot√£o "Renovar" do modal
                            const modalRenovarButton = await page.$('#renewModal button[type="submit"]');
                            
                            if (modalRenovarButton) {
                                console.log('‚úÖ Bot√£o "Renovar" encontrado no modal!');
                                
                                // Verificar o texto do bot√£o
                                const buttonText = await page.evaluate(el => el.textContent, modalRenovarButton);
                                console.log(`üîò Texto do bot√£o: "${buttonText}"`);
                                
                                console.log('üîÑ Clicando no bot√£o "Renovar"...');
                                await modalRenovarButton.click();
                                
                                console.log('‚úÖ CLIQUE NO BOT√ÉO RENOVAR REALIZADO!');
                                
                                // Aguardar processamento
                                await sleep(5000);
                                
                                // Screenshot final
                                await page.screenshot({ path: 'renovacao-final-sucesso.png', fullPage: true });
                                console.log('üì∏ Screenshot final');
                                
                                // Verificar se apareceu modal de confirma√ß√£o
                                const confirmModal = await page.$('#renewConfirmationModal');
                                if (confirmModal) {
                                    console.log('üéâ MODAL DE CONFIRMA√á√ÉO APARECEU!');
                                    console.log('‚úÖ RENOVA√á√ÉO DO CLIENTE 648718886 REALIZADA COM SUCESSO!');
                                } else {
                                    console.log('‚è≥ Aguardando confirma√ß√£o...');
                                    await sleep(3000);
                                    
                                    // Verificar novamente
                                    const confirmModal2 = await page.$('#renewConfirmationModal');
                                    if (confirmModal2) {
                                        console.log('üéâ RENOVA√á√ÉO CONFIRMADA!');
                                    } else {
                                        console.log('‚ÑπÔ∏è Renova√ß√£o processada (modal pode ter fechado)');
                                    }
                                }
                                
                            } else {
                                console.log('‚ùå Bot√£o "Renovar" n√£o encontrado no modal');
                                
                                // Listar bot√µes do modal para debug
                                const modalButtons = await page.$$('#renewModal button');
                                console.log(`üîò Bot√µes no modal: ${modalButtons.length}`);
                                
                                for (let i = 0; i < modalButtons.length; i++) {
                                    try {
                                        const text = await page.evaluate(el => el.textContent, modalButtons[i]);
                                        const type = await page.evaluate(el => el.type, modalButtons[i]);
                                        console.log(`  Bot√£o ${i + 1}: "${text}" (type: ${type})`);
                                    } catch (e) {
                                        console.log(`  Bot√£o ${i + 1}: erro ao ler`);
                                    }
                                }
                            }
                            
                        } else {
                            console.log('‚ùå Bot√£o de renova√ß√£o n√£o encontrado');
                        }
                        
                    } catch (renewError) {
                        console.log('‚ùå Erro ao procurar bot√£o de renova√ß√£o:', renewError.message);
                        
                        // Tentar seletor alternativo
                        console.log('üîÑ Tentando seletor alternativo...');
                        const altSelector = 'button[class*="btn-warning"][class*="btn-sm"] i[class*="fa-calendar-plus"]';
                        
                        try {
                            const altButton = await page.$(altSelector);
                            if (altButton) {
                                console.log('‚úÖ Bot√£o alternativo encontrado!');
                                const parentButton = await page.evaluateHandle(el => el.parentElement, altButton);
                                await parentButton.click();
                                console.log('üîÑ Clicou no bot√£o alternativo!');
                            }
                        } catch (altError) {
                            console.log('‚ùå Seletor alternativo tamb√©m falhou');
                        }
                    }
                    
                } else {
                    console.log('‚ùå Campo de pesquisa n√£o encontrado');
                }
                
            } else {
                console.log('‚ùå Login falhou');
            }
        }
        
        // Aguardar 20 segundos para ver o resultado
        console.log('\nüëÄ Mantendo navegador aberto por 20 segundos para ver o resultado...');
        await sleep(20000);
        
        console.log('üéâ PROCESSO FINALIZADO!');
        
    } catch (error) {
        console.error('‚ùå Erro:', error.message);
        
        if (browser) {
            try {
                const page = (await browser.pages())[0];
                if (page) {
                    await page.screenshot({ path: 'renovacao-final-erro.png', fullPage: true });
                    console.log('üì∏ Screenshot de erro salvo');
                }
            } catch (e) {
                console.log('‚ö†Ô∏è N√£o foi poss√≠vel tirar screenshot de erro');
            }
        }
        
    } finally {
        if (browser) {
            console.log('üîÑ Fechando navegador...');
            await browser.close();
            console.log('‚úÖ Navegador fechado');
        }
    }
}

renovarClienteFinal().catch(console.error);
